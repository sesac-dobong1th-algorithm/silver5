"""
성규는 학점이 높고 알고리즘도 잘 다루는 편이라 매년 알고리즘 대회에 나가 수상을 해오곤 한다. 성규의 꿈은 대학교 4학년 칼졸업을 하고 나서 좋은 대기업에 취직하여 빨리 돈을 버는 것이다.

어느 날, 성규는 전공 수업을 들으러 강의실에 가서 책을 펴고 앉았다. 이 때 교수님이 수업을 시작하시기 전에 한 말씀 하셨다.

교수님: "음... 여기서 내가 눈 여겨 봐온 학생이 있는데... 그래, 성규야. 너 내 랩실에 들어올 생각 없니? 나와 함께 알고리즘에 대한 논문이나 써보자꾸나."

성규는 큰일이다 싶었다. 성규는 졸업하고 싶었다. 대답을 할 생각이 떠오르기 전에 먼저 도망가야겠다는 생각이 들어버렸다!

문제가 설명이 재미있네요 ㅋㅋ

입력의 첫 번째 줄에 자연수 N(7 ≤ N ≤ 1,000) 이 주어진다.

두 번째 줄부터 N개의 각 줄에 0, 1, 2, 5 중 하나의 숫자가 공백으로 구분되어 N개씩 주어진다.

N개의 줄 중 R번째 줄의 C번째 숫자가 d라는 것은 다음과 같은 의미를 가진다:

d = 0: 책상 (R, C)는 빈 자리이다.
d = 1: 책상 (R, C)는 성규가 아닌 학생이 앉아있다.
d = 2: 책상 (R, C)는 성규가 앉아있다.
d = 5: 책상 (R, C)는 교수님이 앉아있다.
성규와 교수님은 겹치지 않으며, 각각 정확히 한 자리에만 앉아있다.

출력
첫 번째 줄에 성규가 교수님에게서 도망칠 수 있으면 1, 그렇지 못하면 0을 출력한다.



"""

n = int(input())
board = []
gyu = None  # 규의 위치
professor = None  # 교수의 위치

# 보드 초기화 및 규, 교수의 위치 찾기
for i in range(n):
    temp = list(map(int, input().split()))
    for j in range(n):
        if temp[j] == 2:
            gyu = (i, j)
        elif temp[j] == 5:
            professor = (i, j)
    board.append(temp)

# 두 위치 사이에 장애물이 존재하면서 일정 조건을 만족하는지 확인하는 함수
def check(x1, y1, x2, y2):
    cnt = 0
    x_min, x_max = min(x1, x2), max(x1, x2)
    y_min, y_max = min(y1, y2), max(y1, y2)
    
    # 주어진 범위 내의 각 위치에 대해 장애물 개수 세기
    for y in range(y_min, y_max + 1):
        for x in range(x_min, x_max + 1):
            if board[y][x] == 1:
                cnt += 1
    
    # 조건을 만족하는지 확인
    # 문제에서는 유클리드로 구했는데 루트를 표현할 방법이안떠오름...
    # 제곱으로 표현 
    if cnt >= 3 and (x1 - x2)**2 + (y1 - y2)**2 >= 25:
        if x1 == x2 or y1 == y2:
            return True
        else:
            if (x1 - x2)**2 + (y1 - y2)**2 >= 25:
                return True
    else:
        return False

y1, x1 = gyu
y2, x2 = professor

# 함수 호출 및 결과 출력
answer = check(x1, y1, x2, y2)
print(int(answer))

